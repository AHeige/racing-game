/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import { forwardRef, useRef } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF } from '@react-three/drei'
import { useBox } from '@react-three/cannon'
import { useStore } from '../utils/store'

useGLTF.preload('/models/chassis-draco.glb')

const c = new THREE.Color()
const Chassis = forwardRef(({ args = [1.7, 1, 4], mass = 500, children, ...props }, ref) => {
  const glas = useRef()
  const brake = useRef()
  const wheel = useRef()
  const { nodes, materials } = useGLTF('/models/chassis-draco.glb')
  const [, api] = useBox(() => ({ mass, args, allowSleep: false, onCollide: (e) => console.log('bonk', e.body.userData), ...props }), ref)

  useFrame((_, delta) => {
    const state = useStore.getState()
    const isBreaking = state.controls.brake
    const isCockpit = state.controls.cameraType === "FIRST_PERSON"
    const controls = state.controls
    brake.current.material.color.lerp(c.set(isBreaking ? '#555' : 'white'), delta * 10)
    brake.current.material.emissive.lerp(c.set(isBreaking ? 'red' : 'red'), delta * 10)
    brake.current.material.opacity = THREE.MathUtils.lerp(brake.current.material.opacity, isBreaking ? 1 : 0.3, delta * 10)
    glas.current.material.opacity = THREE.MathUtils.lerp(glas.current.material.opacity, isCockpit ? 0.1 : 0.6, delta)
    glas.current.material.color.lerp(c.set(isCockpit ? "white" : "black"), delta)
    wheel.current.rotation.z = THREE.MathUtils.lerp(wheel.current.rotation.z, controls.left ? -Math.PI : controls.right ? Math.PI : 0, delta)
  })

  return (
    <group ref={ref} api={api} dispose={null}>
      <group>
        <mesh castShadow receiveShadow geometry={nodes.Mesh_0_1.geometry} material={materials['Material.001']} material-color="#f0c050" />
        <mesh castShadow geometry={nodes.Mesh_0_2.geometry} material={nodes.Mesh_0_2.material} material-color="#353535" />
        <mesh castShadow ref={glas} geometry={nodes.Mesh_2.geometry} material={materials['Material.003']} material-transparent />
        <mesh ref={brake} geometry={nodes.Mesh_3.geometry} material={materials['Material.004']} material-transparent />
        <mesh geometry={nodes.Mesh_4.geometry} material={materials['Material.005']} />
        <mesh geometry={nodes.Mesh_5.geometry} material={materials['Material.006']} />
        <mesh geometry={nodes.Mesh_6.geometry} material={materials['Material.007']} />
        <mesh geometry={nodes.Mesh_7.geometry} material={materials['Material.008']} />
        <mesh geometry={nodes.Mesh_8.geometry} material={nodes.Mesh_8.material} />
        <group ref={wheel} position={[0.37, 0.25, 0.46]}>
          <mesh geometry={nodes.Mesh_1001.geometry} material={nodes.Mesh_1001.material} />
          <mesh geometry={nodes.Mesh_1001_1.geometry} material={nodes.Mesh_1001_1.material} />
        </group>
      </group>
      {children}
    </group>
  )
})

export { Chassis }
